{"ast":null,"code":"var _jsxFileName = \"/Users/zolyer/Documents/a1/naver_bidding/component-template/template/st_schedule_component/frontend/src/ScheduleComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport ScheduleSelector from 'react-schedule-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ScheduleComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.getData = () => {\n      const scheduleData = this.props.args[\"schedule\"];\n      let convertedSchedule = {};\n      for (let template in scheduleData) {\n        convertedSchedule[template] = scheduleData[template].map(dateString => new Date(dateString));\n      }\n      console.log(convertedSchedule);\n      return convertedSchedule;\n    };\n    this.state = {\n      schedule: this.getData(),\n      selectedTemplate: Object.keys(this.getData())[0]\n    };\n    this.render = () => {\n      // 기존 props\n      const numDays = this.props.args[\"num_days\"];\n      const minTime = this.props.args[\"min_time\"];\n      const maxTime = this.props.args[\"max_time\"];\n      const hourlyChunks = this.props.args[\"hourly_chunks\"];\n      const dateFormat = this.props.args[\"date_format\"];\n      const startDate = this.props.args[\"start_date\"];\n      const templates = Object.keys(this.getData());\n      const dateColors = this.calculateDateColors();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Object.keys(this.state.schedule).map(template => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: this.state.selectedTemplate === template ? this.getSelectedColor(template, templates) : 'grey'\n          },\n          onClick: () => this.setState({\n            selectedTemplate: template\n          }),\n          children: template\n        }, template, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)), /*#__PURE__*/_jsxDEV(ScheduleSelector, {\n          selection: this.state.schedule[this.state.selectedTemplate],\n          numDays: numDays,\n          minTime: minTime,\n          maxTime: maxTime,\n          hourlyChunks: hourlyChunks,\n          dateFormat: dateFormat,\n          startDate: new Date(startDate),\n          columnGap: \"2px\",\n          rowGap: \"2px\",\n          onChange: this.handleChange,\n          renderDateCell: (date, selected, refSetter) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: selected ? dateColors.get(date.getTime()) : \"lightgray\",\n              // 선택되지 않은 경우의 기본 색상\n              width: \"100%\",\n              height: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this);\n    };\n    this.getSelectedColor = (template, templates) => {\n      // 선택된 이벤트에 따라 다른 색상 반환 (색상 코드는 예시입니다)\n      switch (template) {\n        case templates[0]:\n          return '#FF6C6C';\n        case templates[1]:\n          return '#FFBD45';\n        case templates[2]:\n          return '#3D9DF3';\n        case templates[3]:\n          return '#3df355';\n        case templates[4]:\n          return '#b33df3';\n        // 추가 이벤트 색상 조건\n        default:\n          return '#3d43f3';\n        // 기본 색상 (연한 파랑)\n      }\n    };\n    this.getColorForDate = (date, templates) => {\n      for (let template of templates) {\n        if (this.state.schedule[template].some(d => d.getTime() === date.getTime())) {\n          return this.getSelectedColor(template, templates); // 이전에 정의된 getSelectedColor 함수 사용\n        }\n      }\n      return \"lightgray\"; // 기본 색상\n    };\n    this.isSelectedInOtherTemplate = date => {\n      for (let template of Object.keys(this.state.schedule)) {\n        if (template !== this.state.selectedTemplate) {\n          if (this.state.schedule[template].some(d => d.getTime() === date.getTime())) {\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n    this.calculateDateColors = () => {\n      const dateColors = new Map();\n      const templates = Object.keys(this.state.schedule);\n      templates.forEach(template => {\n        this.state.schedule[template].forEach(date => {\n          dateColors.set(date.getTime(), this.getSelectedColor(template, templates));\n        });\n      });\n      return dateColors;\n    };\n    this.handleChange = newSchedule => {\n      this.setState(prevState => ({\n        schedule: {\n          ...prevState.schedule,\n          [this.state.selectedTemplate]: newSchedule\n        }\n      }));\n      const formattedDates = newSchedule.map(date => {\n        const options = {\n          weekday: 'short',\n          hour: 'numeric',\n          minute: 'numeric',\n          hour12: false\n        };\n        const formattedDate = new Intl.DateTimeFormat('en-US', options).format(date);\n        const [weekday, time] = formattedDate.split(' ');\n        return {\n          [weekday]: time\n        };\n      });\n      const jsonDates = formattedDates.reduce((acc, obj) => {\n        const key = Object.keys(obj)[0];\n        const value = Object.values(obj)[0];\n        if (acc[key]) {\n          acc[key].push(value);\n        } else {\n          acc[key] = [value];\n        }\n        return acc;\n      }, {});\n      Streamlit.setComponentValue(jsonDates);\n    };\n  }\n}\nexport default _c = withStreamlitConnection(ScheduleComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","ScheduleSelector","jsxDEV","_jsxDEV","ScheduleComponent","constructor","args","getData","scheduleData","props","convertedSchedule","template","map","dateString","Date","console","log","state","schedule","selectedTemplate","Object","keys","render","numDays","minTime","maxTime","hourlyChunks","dateFormat","startDate","templates","dateColors","calculateDateColors","children","style","backgroundColor","getSelectedColor","onClick","setState","fileName","_jsxFileName","lineNumber","columnNumber","selection","columnGap","rowGap","onChange","handleChange","renderDateCell","date","selected","refSetter","get","getTime","width","height","getColorForDate","some","d","isSelectedInOtherTemplate","Map","forEach","set","newSchedule","prevState","formattedDates","options","weekday","hour","minute","hour12","formattedDate","Intl","DateTimeFormat","format","time","split","jsonDates","reduce","acc","obj","key","value","values","push","setComponentValue","_c","$RefreshReg$"],"sources":["/Users/zolyer/Documents/a1/naver_bidding/component-template/template/st_schedule_component/frontend/src/ScheduleComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport ScheduleSelector from 'react-schedule-selector'\n\ninterface State {\n  schedule: { [key: string]: Date[] }\n  selectedTemplate: string\n}\n\nclass ScheduleComponent extends StreamlitComponentBase<State> {\n  public getData = () => {\n    const scheduleData: { [key: string]: string[] } = this.props.args[\"schedule\"];\n    let convertedSchedule: { [key: string]: Date[] } = {};\n  \n    for (let template in scheduleData) {\n      convertedSchedule[template] = scheduleData[template].map(dateString => new Date(dateString));\n    }\n  \n    console.log(convertedSchedule);\n    return convertedSchedule;\n  }\n\n  public state = { schedule: this.getData(), selectedTemplate: Object.keys(this.getData())[0] }\n\n\n  public render = (): ReactNode => {\n    // 기존 props\n    const numDays = this.props.args[\"num_days\"]\n    const minTime = this.props.args[\"min_time\"]\n    const maxTime = this.props.args[\"max_time\"]\n    const hourlyChunks = this.props.args[\"hourly_chunks\"]\n    const dateFormat = this.props.args[\"date_format\"]\n    const startDate = this.props.args[\"start_date\"]\n\n    const templates = Object.keys(this.getData())\n\n    const dateColors = this.calculateDateColors();\n\n    return (\n      <div>\n        {Object.keys(this.state.schedule).map(template => (\n          <button\n            key={template}\n            style={{\n              backgroundColor: this.state.selectedTemplate === template\n                ? this.getSelectedColor(template, templates)\n                : 'grey'\n            }}\n            onClick={() => this.setState({ selectedTemplate: template })}\n          >\n            {template}\n          </button>\n        ))}\n\n        <ScheduleSelector\n          selection={this.state.schedule[this.state.selectedTemplate]}\n          numDays={numDays}\n          minTime={minTime}\n          maxTime={maxTime}\n          hourlyChunks={hourlyChunks}\n          dateFormat={dateFormat}\n          startDate={new Date(startDate)}\n          columnGap=\"2px\"\n          rowGap=\"2px\"\n          onChange={this.handleChange}\n          renderDateCell={(date, selected, refSetter) => (\n            <div\n              style={{\n                backgroundColor: selected ? dateColors.get(date.getTime())\n                              : \"lightgray\", // 선택되지 않은 경우의 기본 색상\n                width: \"100%\",\n                height: \"100%\"\n              }}\n            />\n          )}\n        />\n      </div>\n    )\n  }\n\n  private getSelectedColor = (template:any, templates:any): string => {\n    // 선택된 이벤트에 따라 다른 색상 반환 (색상 코드는 예시입니다)\n    switch (template) {\n      case templates[0]: return '#FF6C6C';\n      case templates[1]: return '#FFBD45';\n      case templates[2]: return '#3D9DF3';\n      case templates[3]: return '#3df355';\n      case templates[4]: return '#b33df3';\n      // 추가 이벤트 색상 조건\n      default: return '#3d43f3'; // 기본 색상 (연한 파랑)\n    }\n  }\n\n  private getColorForDate = (date: Date, templates: string[]): string => {\n    for (let template of templates) {\n      if (this.state.schedule[template].some(d => d.getTime() === date.getTime())) {\n        return this.getSelectedColor(template, templates); // 이전에 정의된 getSelectedColor 함수 사용\n      }\n    }\n    return \"lightgray\"; // 기본 색상\n  }\n\n  private isSelectedInOtherTemplate = (date: Date): boolean => {\n    for (let template of Object.keys(this.state.schedule)) {\n      if (template !== this.state.selectedTemplate) {\n        if (this.state.schedule[template].some(d => d.getTime() === date.getTime())) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private calculateDateColors = (): Map<number, string> => {\n    const dateColors = new Map<number, string>();\n    const templates = Object.keys(this.state.schedule);\n  \n    templates.forEach(template => {\n      this.state.schedule[template].forEach(date => {\n        dateColors.set(date.getTime(), this.getSelectedColor(template, templates));\n      });\n    });\n  \n    return dateColors;\n  }\n\n  private handleChange = (newSchedule: any) => {\n    this.setState(prevState => ({\n      schedule: {\n        ...prevState.schedule,\n        [this.state.selectedTemplate]: newSchedule\n      }\n    }));\n\n    const formattedDates: string[] = newSchedule.map((date:any) => {\n      const options: Intl.DateTimeFormatOptions = {\n        weekday: 'short',\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false,\n      };\n      const formattedDate: string = new Intl.DateTimeFormat('en-US', options).format(date);\n      const [weekday, time]: string[] = formattedDate.split(' ');\n      return { [weekday]: time };\n    });\n\n    const jsonDates: { [key: string]: string[] } = formattedDates.reduce(\n      (acc:any, obj:any) => {\n        const key: string = Object.keys(obj)[0];\n        const value: string = Object.values(obj)[0] as string;\n        if (acc[key]) {\n          acc[key].push(value);\n        } else {\n          acc[key] = [value];\n        }\n        return acc;\n      },\n      {}\n    );\n    Streamlit.setComponentValue(jsonDates)\n  }\n}\n\nexport default withStreamlitConnection(ScheduleComponent)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}