{"ast":null,"code":"var _jsxFileName = \"/Users/zolyer/Documents/a1/naver_bidding/component-template/template/st_schedule_component/frontend/src/ScheduleComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport ScheduleSelector from 'react-schedule-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ScheduleComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      schedule: [],\n      selectedEvent: ''\n    };\n    this.render = () => {\n      // 기존 props\n      const numDays = this.props.args[\"num_days\"];\n      const minTime = this.props.args[\"min_time\"];\n      const maxTime = this.props.args[\"max_time\"];\n      const hourlyChunks = this.props.args[\"hourly_chunks\"];\n      const dateFormat = this.props.args[\"date_format\"];\n      const startDate = this.props.args[\"start_date\"];\n\n      // 새로 추가된 events prop\n      const events = this.props.args[\"events\"];\n      const somedays = [new Date(\"2023-12-18T01:00:00Z\"), new Date(\"2023-12-18T02:00:00Z\"), new Date(\"2023-12-18T03:00:00Z\"), new Date(\"2023-12-18T04:00:00Z\"), new Date(\"2023-12-18T05:00:00Z\")];\n\n      // somedays가 비어 있지 않으면 schedule state에 추가\n      if (somedays.length > 0) {\n        this.setState({\n          schedule: [...this.state.schedule, ...somedays]\n        });\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [events.map(event => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: this.state.selectedEvent === event ? 'blue' : 'grey'\n          },\n          onClick: () => this.setState({\n            selectedEvent: event\n          }),\n          children: event\n        }, event, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)), /*#__PURE__*/_jsxDEV(ScheduleSelector, {\n          selection: this.state.schedule,\n          numDays: numDays,\n          minTime: minTime,\n          maxTime: maxTime,\n          hourlyChunks: hourlyChunks,\n          dateFormat: dateFormat,\n          startDate: new Date(startDate),\n          columnGap: \"2px\",\n          rowGap: \"2px\",\n          onChange: this.handleChange\n          // 선택 영역 스타일 변경 (예시)\n          // selectedColor={this.getSelectedColor(events)}\n          ,\n          renderDateCell: (date, selected, refSetter) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: selected ? somedays.find(d => d.getTime() === date.getTime()) ? \"red\" : \"blue\" : \"lightgray\",\n              width: \"100%\",\n              height: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this);\n    };\n    this.getSelectedColor = events => {\n      // 선택된 이벤트에 따라 다른 색상 반환 (색상 코드는 예시입니다)\n      switch (this.state.selectedEvent) {\n        case events[0]:\n          return '#FF6C6C';\n        case events[1]:\n          return '#FFBD45';\n        case events[2]:\n          return '#3D9DF3';\n        case events[3]:\n          return '#3df355';\n        case events[4]:\n          return '#b33df3';\n        // 추가 이벤트 색상 조건\n        default:\n          return '#3d43f3';\n        // 기본 색상 (연한 파랑)\n      }\n    };\n    this.handleChange = newSchedule => {\n      this.setState({\n        schedule: newSchedule\n      });\n      const formattedDates = newSchedule.map(date => {\n        const options = {\n          weekday: 'short',\n          hour: 'numeric',\n          minute: 'numeric',\n          hour12: false\n        };\n        const formattedDate = new Intl.DateTimeFormat('en-US', options).format(date);\n        const [weekday, time] = formattedDate.split(' ');\n        return {\n          [weekday]: time\n        };\n      });\n      const jsonDates = formattedDates.reduce((acc, obj) => {\n        const key = Object.keys(obj)[0];\n        const value = Object.values(obj)[0];\n        if (acc[key]) {\n          acc[key].push(value);\n        } else {\n          acc[key] = [value];\n        }\n        return acc;\n      }, {});\n      Streamlit.setComponentValue(jsonDates);\n    };\n  }\n}\nexport default _c = withStreamlitConnection(ScheduleComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","ScheduleSelector","jsxDEV","_jsxDEV","ScheduleComponent","constructor","args","state","schedule","selectedEvent","render","numDays","props","minTime","maxTime","hourlyChunks","dateFormat","startDate","events","somedays","Date","length","setState","children","map","event","style","backgroundColor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","selection","columnGap","rowGap","onChange","handleChange","renderDateCell","date","selected","refSetter","find","d","getTime","width","height","getSelectedColor","newSchedule","formattedDates","options","weekday","hour","minute","hour12","formattedDate","Intl","DateTimeFormat","format","time","split","jsonDates","reduce","acc","obj","key","Object","keys","value","values","push","setComponentValue","_c","$RefreshReg$"],"sources":["/Users/zolyer/Documents/a1/naver_bidding/component-template/template/st_schedule_component/frontend/src/ScheduleComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport ScheduleSelector from 'react-schedule-selector'\n\ninterface State {\n  schedule: Array<Date>\n  selectedEvent: string\n}\n\nclass ScheduleComponent extends StreamlitComponentBase<State> {\n  public state = { schedule: [], selectedEvent: '' }\n\n  public render = (): ReactNode => {\n    // 기존 props\n    const numDays = this.props.args[\"num_days\"]\n    const minTime = this.props.args[\"min_time\"]\n    const maxTime = this.props.args[\"max_time\"]\n    const hourlyChunks = this.props.args[\"hourly_chunks\"]\n    const dateFormat = this.props.args[\"date_format\"]\n    const startDate = this.props.args[\"start_date\"]\n\n    // 새로 추가된 events prop\n    const events = this.props.args[\"events\"]\n\n    const somedays = [\n      new Date(\"2023-12-18T01:00:00Z\"),\n      new Date(\"2023-12-18T02:00:00Z\"),\n      new Date(\"2023-12-18T03:00:00Z\"),\n      new Date(\"2023-12-18T04:00:00Z\"),\n      new Date(\"2023-12-18T05:00:00Z\"),\n    ]\n\n    // somedays가 비어 있지 않으면 schedule state에 추가\n    if (somedays.length > 0) {\n      this.setState({ schedule: [...this.state.schedule, ...somedays] });\n    }\n\n    return (\n      <div>\n        {/* 이벤트 버튼 */}\n        {events.map((event:any) => (\n          <button\n            key={event}\n            style={{ backgroundColor: this.state.selectedEvent === event ? 'blue' : 'grey' }}\n            onClick={() => this.setState({ selectedEvent: event })}\n          >\n            {event}\n          </button>\n        ))}\n\n        <ScheduleSelector\n          selection={this.state.schedule}\n          numDays={numDays}\n          minTime={minTime}\n          maxTime={maxTime}\n          hourlyChunks={hourlyChunks}\n          dateFormat={dateFormat}\n          startDate={new Date(startDate)}\n          columnGap=\"2px\"\n          rowGap=\"2px\"\n          onChange={this.handleChange}\n          // 선택 영역 스타일 변경 (예시)\n          // selectedColor={this.getSelectedColor(events)}\n          renderDateCell={(date, selected, refSetter) => (\n            <div\n              style={{\n                backgroundColor: selected\n                  ? somedays.find((d) => d.getTime() === date.getTime())\n                    ? \"red\"\n                    : \"blue\"\n                  : \"lightgray\",\n                width: \"100%\",\n                height: \"100%\"\n              }}\n            />\n          )}\n        />\n      </div>\n    )\n  }\n\n  private getSelectedColor = (events:any): string => {\n    // 선택된 이벤트에 따라 다른 색상 반환 (색상 코드는 예시입니다)\n    switch (this.state.selectedEvent) {\n      case events[0]: return '#FF6C6C';\n      case events[1]: return '#FFBD45';\n      case events[2]: return '#3D9DF3';\n      case events[3]: return '#3df355';\n      case events[4]: return '#b33df3';\n      // 추가 이벤트 색상 조건\n      default: return '#3d43f3'; // 기본 색상 (연한 파랑)\n    }\n  }\n  private handleChange = (newSchedule: any) => {\n    this.setState({ schedule: newSchedule })\n\n    const formattedDates: string[] = newSchedule.map((date:any) => {\n      const options: Intl.DateTimeFormatOptions = {\n        weekday: 'short',\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false,\n      };\n      const formattedDate: string = new Intl.DateTimeFormat('en-US', options).format(date);\n      const [weekday, time]: string[] = formattedDate.split(' ');\n      return { [weekday]: time };\n    });\n\n    const jsonDates: { [key: string]: string[] } = formattedDates.reduce(\n      (acc:any, obj:any) => {\n        const key: string = Object.keys(obj)[0];\n        const value: string = Object.values(obj)[0] as string;\n        if (acc[key]) {\n          acc[key].push(value);\n        } else {\n          acc[key] = [value];\n        }\n        return acc;\n      },\n      {}\n    );\n    Streamlit.setComponentValue(jsonDates)\n  }\n}\n\nexport default withStreamlitConnection(ScheduleComponent)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}